import pandas as pd
import csv

"""
TESTING BRANCEHS
Designed to track top, bottom and front points from each dune in footage from 17-01-02.
Dunes are seen in profile. No scale known for video. Horizontal scale will decrease as
dunes get further from the camera (or as their base has a higher y-coordinate.
We hope to obtain scaling information about how their velocities and sizes change in time.
Data is input in series of 3 points per frame per dune in csv files from Tracker.
 - KK Feb 8 2018
 """

class Dune:
	"""
	This is a class which holds information about a snow dune.
	Each dune is described by three points: one on top, one on the bottom,
	and one on the downwind edges.
	These points are defined for each point in time as the dune moves
	across Niwot Ridge.
	
	To use:
	#Create a dune:
	>> new_dune = Dune(name)
	# Put points in the dune using command
	>> new_dune.add_position(frame, (x1,y1), (x2,y2), (x3,y3))
	# Collect points into dataframe
	>> new_dune.finalize()
	# Do some analysis,
	#  e.g. plot position of dune crest against frame number:
	>> plt.plot(new_dune['Frame'], new_dune['Top'])
	"""
	def __init__(self, name):
		"""
		This function lists all the properties that a snow dune should have.
		Every python class needs an __init__ function.
		Call this as: 
		$new_dune = Dune(name)
		"""
		
		# Give every dune a name. Useful for reference.
		self.name = name
		
		# Create an empty data frame - this will be a time series
		# containing the dune's position at several points in time.
		self.position = pd.DataFrame
		
		# Create lists to hold places where the dune is
		self.frames 	= []
		# The dune has three positions: top, bottom, forward
		# each position is an (x,y) couplet
		self.top 		= []
		self.bottom 	= []
		self.front 		= []

	def add_position(self, frame, top, bottom, front):
		"""This function adds a dune position in a frame of the video.
		Top, bottom and front are (x,y) tuples representing position.
		Frame is an integer.
		"""
		self.frames.append(frame)
		self.top.append(top)
		self.bottom.append(bottom)
		self.front.append(front)
		
	def finalize_positions(self)
		"""Once all positions have been added, collect them in a 
		time series (dataframe) structure for easy analysis."""
		self.position['Frame'] 	= pd.Series(self.frames)
		self.position['Top'] 	= pd.Series(self.top)
		self.position['Bottom'] = pd.Series(self.bottom)
		self.position['Front'] 	= pd.Series(self.front)
		# Sort the series by frame number 
		self.position = self.position.set_index('Frame')
		self.position = self.sort_index()
		# Empty the lists
		# (So this function can be repeated with no duplication)
		self.frames 	= []
		self.top 		= []
		self.bottom 	= []
		self.front 		= []
	def point_belongs_to_dune(self, frontpoint)
		"""Check whether a new point could belong to this dune.
		Current criterion: if frontpoint moved right, dune is not same."""
		
		# TO DO - make correct definition? If names ever get reused
		return (frontpoint[0] < self.position.iloc[-1, 'Front'])
	

def read_input_csv(filename):
	"""
	This is a function which reads a filename full of points on the dune.
	The points come from Tracker.
	Each dune, at each point in time, is described by three points
	which are three lines on the csv file.
	The three points are not in a regular order. They represent the
	top of the dune, the bottom of the dune, and the furthest forward point.
	"""	
	with open(filename, 'r') as file:
		csv_reader = csv.reader(file)
		# skip 1 header line
		csv_reader.next()
		# we'll read ~three rows for each dune.
		# here are some trackers to count those:
		current_name = 'NAME'
		current_frame = -1
		points = []
		for row in csv_reader:
			frame 	= row[0]
			name 	= row[1]
			x 		= row[2]
			y 		= row[3]
			pos 	= (x, y)
			# If same name and same frame: same dune as last row
			if (name == current_name) and (frame == current_frame):
				points.append(point)
			# Else: new dune! Save old one and move on
			else:
				# Is the dune already in the dictionary?
				if name in dunes.keys():
					# Is this the SAME dune as the last one with that name?
					if point_belongs_to_dune(dunes[name]):
						dune_for_points = dunes[name]
					else:
						# Move the old dune to a new name.
						while new_name in dunes.keys():
							new_name = name + '0'
						dunes[new_name] = dunes[name]
						# Now name is available for new dune.
						dunes[name] = Dune(name)
				# If dune of this name not in dictionary, add it.
				else:
					dunes[name] = Dune(name)					
			
				# Save points from the old dune
				# First sort points by x position to find front,
				# take frontpoint out of list
				points.sort(points, key=lambda point: point[0])
				frontpoint 	= points[0]
				points 		= points[1:]
				# Then sort by y position to find top + bottom
				points.sort(points, key=lambda point:point[1])
				toppoint 	= points[0]
				bottompoint = points[1]
				# Add points to the dune
				Dune[name].add_position(frame, toppoint, bottompoint, frontpoint)
				
				points= []
				points.append(point)
				
